{"version":3,"sources":["App.js","index.js","../../src/config.js","../../src/useGeneratedLeet.js","../../src/getLeetValue.js","../../src/index.js"],"names":["CustomValue","from","to","onRemove","index","style","display","alignItems","onClick","App","useState","customMap","setCustomMap","customValues","setCustomValues","setFrom","setTo","useLeet","value","setValue","leet","handleChange","event","setter","target","setCustomMapFromValues","newValues","newMap","forEach","cv","padding","fontSize","fontFamily","lineHeight","color","href","onChange","minWidth","minHeight","paddingTop","length","map","key","i","push","handleRemove","ReactDOM","render","document","getElementById","defaultLeetMap","a","b","c","d","e","f","g","h","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","useGeneratedLeet","useMemo","UseLeet","subbedValue","letter","leetMap","leetValue","getLeetValue","global","UseLeetGlobal","this","UseLeetError","str","arg","UseLeetCustomMapError","UseLeetCustomGeneratorError","defaultValue","custom","customLeetMap","Object","generator"],"mappings":"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","file":"static/js/main.6798055c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useLeet } from \"@taystack/use-leet\";\n\n\nconst CustomValue = ({ from, to, index, onRemove }) => (\n  <div style={{\n    display: \"flex\",\n    alignItems: \"center\",\n  }}>\n    from&nbsp;<code>{from}</code>&nbsp;into&nbsp;<code>{to}</code>&nbsp;<div onClick={onRemove}>remove</div>\n  </div>\n);\n\nconst App = () => {\n  const [customMap, setCustomMap] = useState({});\n  const [customValues, setCustomValues] = useState([]);\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n  const [value, setValue, leet] = useLeet(\"You can modify this text\\nBelow is the compiled version of whetever you put here\\nI just owned a bunch of noobs\\ndude, you are all my dudes and dudettes\\nyour zebra was fired and banned over dope hacks\\nunique, new york\\nget off my lawn\\nthe internet is a series of tubes\\nthe answer is 42\", customMap);\n\n  const handleRemove = index => {\n    const newValues = [];\n    customValues.forEach((cv, i) => {\n      if (index !== i) newValues.push(cv);\n    });\n    setCustomValues(newValues);\n    setCustomMapFromValues(newValues);\n  };\n\n  const handleChange = (event, setter) => {\n    setter(event.target.value[0]);\n  }\n\n  const setCustomMapFromValues = (newValues) => {\n    const newMap = {};\n    newValues.forEach(cv => { newMap[cv.from] = cv.to; });\n    setCustomMap(newMap);\n  }\n\n  const handleAdd = () => {\n    if (from && from.length && to && to.length) {\n      const newValues = [...customValues, { from, to }];\n      setCustomValues(newValues);\n      setFrom(\"\");\n      setTo(\"\");\n      setCustomMapFromValues(newValues);\n    }\n  }\n\n  return (\n    <>\n    <div style={{\n      padding: 50,\n      fontSize: 16,\n      fontFamily: \"Arial\",\n      lineHeight: \"1.5em\",\n      color: \"#2d2d2d\",\n    }}>\n    <h1><a href=\"https://github.com/taystack/use-leet\">@taystack/use-leet</a></h1>\n      <p>Leetify your text with this react 16.8+ hook</p>\n      <textarea\n        value={value}\n        onChange={event => setValue(event.target.value)}\n        style={{\n          fontSize: 16,\n          minWidth: 500,\n          minHeight: 200,\n        }}\n      />\n\n      <div style={{ paddingTop: 20 }}>\n        <pre>{leet}</pre>\n      </div>\n\n\n      <div style={{ paddingTop: 20 }}>Set custom values:</div>\n      change <input value={from} onChange={event => handleChange(event, setFrom)} />\n      to <input value={to} onChange={event => handleChange(event, setTo)} />\n      <button onClick={handleAdd}>add</button>\n      {customValues.map((cv, index) => <CustomValue key={cv.from} from={cv.from} to={cv.to} index={index} onRemove={() => handleRemove(index)} />)}\n\n    </div>\n    </>\n  );\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","export const defaultLeetMap = {\n  a: \"4\",\n  b: \"b\",\n  c: \"c\",\n  d: \"d\",\n  e: \"3\",\n  f: \"f\",\n  g: \"g\",\n  h: \"h\",\n  i: \"i\",\n  j: \"j\",\n  k: \"k\",\n  l: \"1\",\n  m: \"m\",\n  n: \"n\",\n  o: \"0\",\n  p: \"p\",\n  q: \"q\",\n  r: \"r\",\n  s: \"5\",\n  t: \"7\",\n  u: \"u\",\n  v: \"v\",\n  w: \"w\",\n  x: \"x\",\n  y: \"y\",\n  z: \"z\",\n  \"1\": \"L\",\n  \"2\": \"Z\",\n  \"3\": \"E\",\n  \"4\": \"A\",\n  \"5\": \"S\",\n  \"6\": \"b\",\n  \"7\": \"T\",\n  \"8\": \"B\",\n  \"9\": \"g\",\n  \"0\": \"o\",\n  \"!\": \"zorz\",\n\n  // Preserved items,\n  \"…\": \"ness\",\n};\n\n\n/*\n\nSome characters that may be safe for pointing at preserved text.\n…¬˚∆©ßåœ∑´®¥¨ˆøπ“‘’”«»≠–ºª•¶§∞¢£™¡`Ω≈ç√˜µ≤≥÷\n*/\n\n\nexport default {};\n","import { useMemo } from \"react\";\nimport UseLeet from \"./\";\nimport getLeetValue from \"./getLeetValue\";\n\n\nexport default function useGeneratedLeet( value, leetMap ) {\n  // Memoize the generated leet when either VALUE, LEET_MAP, or UseLeet.generator changes\n  return useMemo(() => {\n\n    // Hotwire our way to the custom generator.\n    if (UseLeet.generator) { return UseLeet.generator(value); }\n\n    // Get some words out that transpile to characters\n    let subbedValue = value;\n\n    // Point at 'ness' with a safe-ish character.\n    subbedValue = subbedValue.replace(/ness/gi, \"…\");\n\n    // own -> pwn\n    subbedValue = subbedValue.replace(/own/gi, \"pwn\");\n\n    // and, banned, sandbox -> &, b&, &box\n    subbedValue = subbedValue.replace(/and|anned/gi, \"&\");\n\n    // replace past participles (ed) WORDed -> WORDd\n    subbedValue = subbedValue.replace(/ed\\b/gi, \"d\");\n\n    // dude -> dood, dudes -> doodz\n    subbedValue = subbedValue.replace(/dudes/gi, \"doodz\");\n    subbedValue = subbedValue.replace(/dude/gi, \"dood\");\n\n    // fool -> foo\n    subbedValue = subbedValue.replace(/fool/gi, \"foo\");\n\n    // Some people need help with 'you're a' from 'your a'. I'm a nice guy\n    subbedValue = subbedValue.replace(/you\\sare\\sa|you\\'re\\sa|your\\sa/gi, \"you a\");\n\n    // you -> joo\n    subbedValue = subbedValue.replace(/\\byou/gi, \"joo\");\n\n    // my -> mah\n    subbedValue = subbedValue.replace(/\\bmy\\b/gi, \"mah\");\n\n    // [...greetings] -> jo\n    subbedValue = subbedValue.replace(/yo|hi|hey|hello|sup|what\\'s\\sup|what\\sis\\sup/gi, \"jo\");\n\n    // Not a noob, but a newb.\n    subbedValue = subbedValue.replace(/new\\sperson/gi, \"newb\");\n\n    // hacks -> hax\n    subbedValue = subbedValue.replace(/hacks/gi, \"hax\");\n\n    // Generate the gibberish...\n    const generatedLeet = subbedValue.split(\"\").map(letter => getLeetValue(letter, leetMap)).join(\"\");\n\n    // Memoize the generated leet\n    return generatedLeet;\n\n  }, [value, leetMap, UseLeet.generator]);\n}\n","// import { defaultLeetMap } from \"./config\";\nimport UseLeet from \"./\";\n\n\n// Return the mapped value if it exists.\n// otherwise return the letter.\nexport default function getLeetValue(letter, leetMap) {\n  let leetValue = leetMap[letter.toLowerCase()];\n  return leetValue ? leetValue : letter;\n}\n","import { useState, useMemo } from \"react\";\nimport { defaultLeetMap } from \"./config\";\nimport useGeneratedLeet from \"./useGeneratedLeet\";\n\n\nexport default (global.UseLeet || (global.UseLeet = new UseLeetGlobal()));\n\nfunction UseLeetGlobal() {\n  this.map = { ...defaultLeetMap };\n  this.generator = false;\n}\n\nexport class UseLeetError extends Error {\n  constructor(msg, arg) {\n    const str = `${msg} - you provided`;\n    try { super(`${str} ${arg.toString()}`);\n    } catch(e) { super(`${str} something... something unprintable.`); }\n  }\n}\n\nexport class UseLeetCustomMapError extends UseLeetError {\n  constructor(arg) { super(\"UseLeet expects customMap to be of a shape { CHAR_A: CHAR_A_RETURNS }\", arg); }\n}\n\nexport class UseLeetCustomGeneratorError extends UseLeetError {\n  constructor(arg) {\n    super(\"UseLeet expects customGenerator to be of type FUNC\", arg);\n  }\n}\n\nUseLeetGlobal.prototype.setMap = function(customLeetMap) {\n  if (customLeetMap.constructor !== Object) throw new UseLeetCustomMapError(customLeetMap);\n  Object.keys(customLeetMap).forEach(k => {\n    if (typeof customLeetMap[k] !== \"string\") throw new UseLeetCustomMapError(customLeetMap[k]);\n  });\n  this.map = {\n    ...defaultLeetMap,\n    ...customLeetMap,\n  };\n}\n\nUseLeetGlobal.prototype.setGenerator = function(generator) {\n  if (typeof generator !== \"function\") throw new UseLeetCustomGeneratorError(generator);\n  this.generator = generator;\n}\n\nUseLeetGlobal.prototype.resetGenerator = function() {\n  this.generator = false;\n}\n\nUseLeetGlobal.prototype.getMap = function() {\n  return this.map;\n}\n\nUseLeetGlobal.prototype.resetMap = function() {\n  this.map = { ...defaultLeetMap };\n}\n\nexport function useLeet( defaultValue = \"\", custom = {} ) {\n\n  // Store the plain text stuff\n  const [ value, setValue ] = useState(defaultValue);\n\n  // Memoize the map used for leet-ifying\n  const leetMap = useMemo(() => {\n    return {\n      ...UseLeet.getMap(),\n      ...custom,\n    };\n  }, [custom]);\n\n  // Memoize the generated leet\n  const leet = useGeneratedLeet(value, leetMap, UseLeet.generator);\n\n  return [ value, setValue, leet ];\n}\n"],"sourceRoot":""}