{"version":3,"sources":["../../src/config.js","../../src/getLeetValue.js","../../src/useGeneratedLeet.js","../../src/index.js","App.js","index.js"],"names":["defaultLeetMap","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","getLeetValue","letter","leetMap","leetValue","useGeneratedLeet","useMemo","subbedValue","value","defaultValue","custom","useState","setValue","leet","CustomValue","from","to","onRemove","index","style","display","alignItems","onClick","App","customMap","setCustomMap","customValues","setCustomValues","setFrom","setTo","useLeet","handleChange","event","setter","target","setCustomMapFromValues","newValues","newMap","forEach","cv","padding","fontSize","onChange","minWidth","minHeight","paddingTop","length","map","key","push","handleRemove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbd4a991.chunk.js","sourcesContent":["export const defaultLeetMap = {\n  a: \"4\",\n  b: \"b\",\n  c: \"c\",\n  d: \"d\",\n  e: \"3\",\n  f: \"f\",\n  g: \"g\",\n  h: \"h\",\n  i: \"i\",\n  j: \"j\",\n  k: \"k\",\n  l: \"1\",\n  m: \"m\",\n  n: \"n\",\n  o: \"0\",\n  p: \"p\",\n  q: \"q\",\n  r: \"r\",\n  s: \"5\",\n  t: \"7\",\n  u: \"u\",\n  v: \"v\",\n  w: \"w\",\n  x: \"x\",\n  y: \"y\",\n  z: \"z\",\n  \"1\": \"L\",\n  \"2\": \"Z\",\n  \"3\": \"E\",\n  \"4\": \"A\",\n  \"5\": \"S\",\n  \"6\": \"b\",\n  \"7\": \"T\",\n  \"8\": \"B\",\n  \"9\": \"g\",\n  \"0\": \"o\",\n  \"!\": \"zorz\",\n\n  // Preserved items,\n  \"…\": \"ness\",\n};\n\n\n/*\n\nSome characters that may be safe for pointing at preserved text.\n…¬˚∆©ßåœ∑´®¥¨ˆøπ“‘’”«»≠–ºª•¶§∞¢£™¡`Ω≈ç√˜µ≤≥÷\n*/\n\n\nexport default {};\n","import { defaultLeetMap } from \"./config\";\n\n\n// Return the mapped value if it exists.\n// otherwise return the letter.\nexport default function getLeetValue(letter, leetMap = defaultLeetMap) {\n  let leetValue = leetMap[letter.toLowerCase()];\n  return leetValue ? leetValue : letter;\n}\n","import { useMemo } from \"react\";\nimport { defaultLeetMap } from \"./config\";\nimport getLeetValue from \"./getLeetValue\";\n\n\nexport default function useGeneratedLeet( value, leetMap = defaultLeetMap ) {\n  // Memoize the generated leet when either VALUE or LEET_MAP changes\n  return useMemo(() => {\n\n    // Get some words out that transpile to characters\n    let subbedValue = value;\n\n    // Point at 'ness' with a safe-ish character.\n    subbedValue = subbedValue.replace(/ness/gi, \"…\");\n\n    // own -> pwn\n    subbedValue = subbedValue.replace(/own/gi, \"pwn\");\n\n    // and, banned, sandbox -> &, b&, &box\n    subbedValue = subbedValue.replace(/and|anned/gi, \"&\");\n\n    // replace past participles (ed) WORDed -> WORDd\n    subbedValue = subbedValue.replace(/ed\\b/gi, \"d\");\n\n    // dude -> dood, dudes -> doodz\n    subbedValue = subbedValue.replace(/dudes/gi, \"doodz\");\n    subbedValue = subbedValue.replace(/dude/gi, \"dood\");\n\n    // fool -> foo\n    subbedValue = subbedValue.replace(/fool/gi, \"foo\");\n\n    // Some people need help with 'you're a' from 'your a'. I'm a nice guy\n    subbedValue = subbedValue.replace(/you\\sare\\sa|you\\'re\\sa|your\\sa/gi, \"you a\");\n\n    // you -> joo\n    subbedValue = subbedValue.replace(/\\byou/gi, \"joo\");\n\n    // my -> mah\n    subbedValue = subbedValue.replace(/\\bmy\\b/gi, \"mah\");\n\n    // [...greetings] -> jo\n    subbedValue = subbedValue.replace(/yo|hi|hey|hello|sup|what\\'s\\sup|what\\sis\\sup/gi, \"jo\");\n\n    // Not a noob, but a newb.\n    subbedValue = subbedValue.replace(/new\\sperson/gi, \"newb\");\n\n    // hacks -> hax\n    subbedValue = subbedValue.replace(/hacks/gi, \"hax\");\n\n    // Generate the gibberish...\n    const generatedLeet = subbedValue.split(\"\").map(letter => getLeetValue(letter, leetMap)).join(\"\");\n\n    // Memoize the generated leet\n    return generatedLeet;\n\n  }, [value, leetMap]);\n}\n","import { useState, useMemo } from \"react\";\nimport { defaultLeetMap } from \"./config\";\nimport useGeneratedLeet from \"./useGeneratedLeet\";\n\n\nexport default function useLeet( defaultValue = \"\", custom = {} ) {\n\n  // Store the plain text stuff\n  const [ value, setValue ] = useState(defaultValue);\n\n  // Memoize the map used for leet-ifying\n  const leetMap = useMemo(() => {\n    return {\n      ...defaultLeetMap,\n      ...custom,\n    };\n  }, [custom]);\n\n  // Memoize the generated leet\n  const leet = useGeneratedLeet(value, leetMap);\n\n  return [ value, setValue, leet ];\n}\n","import React, { useState } from \"react\";\nimport useLeet from \"@taystack/use-leet\";\n\n\nconst CustomValue = ({ from, to, index, onRemove }) => (\n  <div style={{\n    display: \"flex\",\n    alignItems: \"center\",\n  }}>\n    from&nbsp;<code>{from}</code>&nbsp;into&nbsp;<code>{to}</code>&nbsp;<div onClick={onRemove}>remove</div>\n  </div>\n);\n\nconst App = () => {\n  const [customMap, setCustomMap] = useState({});\n  const [customValues, setCustomValues] = useState([]);\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n  const [value, setValue, leet] = useLeet(\"I just owned a bunch of noobs\\ndude, you are all my dudes and dudettes\\nyour zebra was fired and banned over dope hacks\\nunique, new york\\nget off my lawn\\nthe internet is a series of tubes\\nthe answer is 42\", customMap);\n\n  const handleRemove = index => {\n    const newValues = [];\n    customValues.forEach((cv, i) => {\n      if (index !== i) newValues.push(cv);\n    });\n    setCustomValues(newValues);\n    setCustomMapFromValues(newValues);\n  };\n\n  const handleChange = (event, setter) => {\n    setter(event.target.value[0]);\n  }\n\n  const setCustomMapFromValues = (newValues) => {\n    const newMap = {};\n    newValues.forEach(cv => { newMap[cv.from] = cv.to; });\n    setCustomMap(newMap);\n  }\n\n  const handleAdd = () => {\n    if (from && from.length && to && to.length) {\n      const newValues = [...customValues, { from, to }];\n      setCustomValues(newValues);\n      setFrom(\"\");\n      setTo(\"\");\n      setCustomMapFromValues(newValues);\n    }\n  }\n\n  return (\n    <>\n    <div style={{\n      padding: 50,\n      fontSize: 16,\n    }}>\n      <textarea\n        value={value}\n        onChange={event => setValue(event.target.value)}\n        style={{\n          fontSize: 16,\n          minWidth: 500,\n          minHeight: 200,\n        }}\n      />\n\n      <div style={{ paddingTop: 20 }}>\n        <pre>{leet}</pre>\n      </div>\n\n\n      <div style={{ paddingTop: 20 }}>Set custom values:</div>\n      change <input value={from} onChange={event => handleChange(event, setFrom)} />\n      to <input value={to} onChange={event => handleChange(event, setTo)} />\n      <button onClick={handleAdd}>add</button>\n      {customValues.map((cv, index) => <CustomValue key={cv.from} from={cv.from} to={cv.to} index={index} onRemove={() => handleRemove(index)} />)}\n\n    </div>\n    </>\n  );\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}